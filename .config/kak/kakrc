
# Creation of various windows/panes/whatever

def -allow-override term-kak-new %{
	nop %sh{ ( /usr/bin/urxvt -e kak -c $kak_session ) >/dev/null 2>&1 </dev/null & }<ret>
}
def -allow-override term-ranger-new %{
	nop %sh{ (
		/usr/bin/urxvt -e /usr/bin/ranger
	) >/dev/null 2>&1 </dev/null & }<ret>
}
def -allow-override term-shell-new %{
	nop %sh{ ( /usr/bin/urxvt ) >/dev/null 2>&1 </dev/null & }<ret>
}

def -allow-override window_multimap %{
	on-key %{ %sh{
		case "$kak_key"	in
			t|v)
				# Create a horizontal tmux split, handy in remote sessions
				echo tmux-new-horizontal
				;;
			w|c)
				# Create a new terminal window with another kakoune client
				echo term-kak-new
				;;
			r)
				# Create a new terminal window running ranger to edit a file "close by"
				# Not crucial anymore since I know there is already :ranger and
				# :ranger-open-on-edit-directory, but still useful for open other "related" files to 
				# a project that require non-editor apps (like graphics) or doing sequences of file operations
				echo term-ranger-new
				;;
			s)
				echo term-shell-new
				;;
			*)
				echo echo key "$kak_key" not bound.
				;;
		esac
	} }
}

# I like the others actually more, but default simply has the best contrast
colorscheme default

set global autochdir true

set global grepcmd 'ag --column'

# indentwidth = 0 -> indent with tabs
set global indentwidth 0
set global tabstop 4

# Make commands like ":edit ." open ranger for file selection
ranger-open-on-edit-directory

# ,w -> Create some kind of window
map global user w :window_multimap<ret>

# ,y / ,p -> yank/paste to/from clipboard
map global user y '<a-|>xclip -selection clipboard<ret>'
map global user p '<a-!>xclip -selection clipboard -out<ret>'

# ,f -> auto-format current selection (by piping through "fmt")
map global user f '|fmt<ret>'

map global normal '#' :comment-line<ret>

map global goto n <esc>:grep-next<ret>
map global goto p <esc>:grep-prev<ret>

# Show whitespaces (vim:listchars-alike), source: issue #309
map global user l '<esc>:addhl show_whitespaces<ret>'
map global user L '<esc>:rmhl show_whitespaces<ret>'

